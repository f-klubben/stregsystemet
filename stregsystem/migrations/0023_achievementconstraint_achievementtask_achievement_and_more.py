# Generated by Django 4.1.13 on 2025-05-23 12:16

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("stregsystem", "0022_productnote"),
    ]

    operations = [
        migrations.CreateModel(
            name="AchievementConstraint",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("notes", models.CharField(blank=True, max_length=200)),
                (
                    "month_start",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "January"),
                            (2, "Feburary"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        help_text="If not set, other constraints to no specific months. (requires Month End).",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                (
                    "month_end",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "January"),
                            (2, "Feburary"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        help_text="If not set, other constraints to no specific months. (requires Month Start).",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                (
                    "day_start",
                    models.IntegerField(
                        blank=True,
                        help_text="If not set, constraints apply to no specific days. (requires Day End).",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(31),
                        ],
                    ),
                ),
                (
                    "day_end",
                    models.IntegerField(
                        blank=True,
                        help_text="If not set, other constraints apply no specfic days. (requires Day Start).",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(31),
                        ],
                    ),
                ),
                (
                    "time_start",
                    models.TimeField(
                        blank=True,
                        help_text="If not set, other constraints apply no specfic time range. (requires Time End).",
                        null=True,
                    ),
                ),
                (
                    "time_end",
                    models.TimeField(
                        blank=True,
                        help_text="If not set, other constraints apply no specfic time range. (requires Time Start).",
                        null=True,
                    ),
                ),
                (
                    "weekday",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ],
                        help_text="If not set, other constraints apply no specfic weekday.",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AchievementTask",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("notes", models.CharField(blank=True, max_length=200)),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("product", "Specific Product"),
                            ("category", "Product Category"),
                            ("any_purchase", "Any Purchase"),
                            ("alcohol_content", "Alcohol Content"),
                            ("caffeine_content", "Caffeine Content"),
                            ("used_funds", "Used Funds"),
                            ("remaining_funds", "Remaining Funds"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "goal_value",
                    models.IntegerField(
                        help_text="E.g. 300 = 3.00ml or mg. For funds: 500 = 5.00 kr."
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        help_text="Only has to be set, if 'Product Category' was chosen as the Task Type.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.category",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        help_text="Only has to be set, if 'Specific Product' was chosen as the Task Type.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.product",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=50)),
                ("description", models.CharField(max_length=100)),
                ("icon", models.ImageField(upload_to="stregsystem/achievement")),
                (
                    "active_from",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start datetime for tracking. Conflicts with 'Active Duration'. Leave both blank for all-time history.",
                        null=True,
                    ),
                ),
                (
                    "active_duration",
                    models.DurationField(
                        blank=True,
                        help_text="Time window for tracking. Conflicts with 'Active From'. Leave both blank for all-time history.",
                        null=True,
                    ),
                ),
                (
                    "constraints",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Optional time-based constraints for this achievement.",
                        related_name="achievements",
                        to="stregsystem.achievementconstraint",
                    ),
                ),
                (
                    "tasks",
                    models.ManyToManyField(
                        help_text="Tasks that must be completed to earn this achievement.",
                        related_name="achievements",
                        to="stregsystem.achievementtask",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AchievementComplete",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("completed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "achievement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.achievement",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.member",
                    ),
                ),
            ],
            options={
                "unique_together": {("member", "achievement")},
            },
        ),
    ]
