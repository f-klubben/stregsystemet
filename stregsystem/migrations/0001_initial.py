# Generated by Django 4.1.13 on 2025-05-14 07:58

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import stregsystem.models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=50)),
                ("description", models.CharField(max_length=100)),
                ("icon_png", models.CharField(max_length=255)),
                ("begin_at", models.DateTimeField(blank=True, null=True)),
                ("duration", models.DurationField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64)),
            ],
            options={
                "verbose_name_plural": "Categories",
            },
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                (
                    "username",
                    models.CharField(
                        max_length=16,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_username", regex="^\\S+$"
                            )
                        ],
                    ),
                ),
                (
                    "year",
                    models.CharField(
                        default=stregsystem.models.get_current_year, max_length=4
                    ),
                ),
                ("firstname", models.CharField(max_length=20)),
                ("lastname", models.CharField(max_length=30)),
                (
                    "gender",
                    models.CharField(
                        choices=[("U", "Unknown"), ("M", "Male"), ("F", "Female")],
                        max_length=1,
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("want_spam", models.BooleanField(default=True)),
                ("balance", models.IntegerField(default=0)),
                ("undo_count", models.IntegerField(default=0)),
                ("notes", models.TextField(blank=True)),
                ("signup_due_paid", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="News",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=64)),
                ("text", models.TextField()),
                ("pub_date", models.DateTimeField()),
                ("stop_date", models.DateTimeField()),
            ],
            options={
                "verbose_name_plural": "News",
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                ("price", models.IntegerField()),
                ("active", models.BooleanField()),
                ("start_date", models.DateField(blank=True, null=True)),
                ("quantity", models.IntegerField(default=0)),
                ("deactivate_date", models.DateTimeField(blank=True, null=True)),
                ("alcohol_content_ml", models.FloatField(default=0.0, null=True)),
                ("caffeine_content_mg", models.IntegerField(default=0)),
                (
                    "categories",
                    models.ManyToManyField(blank=True, to="stregsystem.category"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                ("description", models.CharField(max_length=64)),
                ("notes", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="Theme",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, verbose_name="Name")),
                (
                    "html",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=50,
                        verbose_name="HTML filename",
                    ),
                ),
                (
                    "css",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=50,
                        verbose_name="CSS filename",
                    ),
                ),
                (
                    "js",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=50,
                        verbose_name="JS filename",
                    ),
                ),
                (
                    "begin_month",
                    models.PositiveSmallIntegerField(verbose_name="Begin month"),
                ),
                (
                    "begin_day",
                    models.PositiveSmallIntegerField(
                        default=1, verbose_name="Begin day"
                    ),
                ),
                (
                    "end_month",
                    models.PositiveSmallIntegerField(verbose_name="End month"),
                ),
                (
                    "end_day",
                    models.PositiveSmallIntegerField(
                        default=31, verbose_name="End day"
                    ),
                ),
                (
                    "override",
                    models.CharField(
                        choices=[
                            ("N", "None"),
                            ("S", "Force show"),
                            ("H", "Force hide"),
                        ],
                        default="N",
                        max_length=1,
                        verbose_name="Override",
                    ),
                ),
            ],
            options={
                "ordering": ["begin_month", "begin_day"],
            },
        ),
        migrations.CreateModel(
            name="ProductNote",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField()),
                ("active", models.BooleanField(default=True)),
                (
                    "background_color",
                    models.CharField(
                        blank="red",
                        help_text="Write a valid html color (default: red)",
                        max_length=20,
                    ),
                ),
                (
                    "text_color",
                    models.CharField(
                        blank="black",
                        help_text="Write a valid html color (default: black)",
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("comment", models.TextField(blank=True)),
                ("products", models.ManyToManyField(to="stregsystem.product")),
                ("rooms", models.ManyToManyField(blank=True, to="stregsystem.room")),
            ],
        ),
        migrations.AddField(
            model_name="product",
            name="rooms",
            field=models.ManyToManyField(blank=True, to="stregsystem.room"),
        ),
        migrations.CreateModel(
            name="PendingSignup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("U", "Unset"),
                            ("A", "Approved"),
                            ("I", "Ignored"),
                            ("R", "Rejected"),
                        ],
                        default="U",
                        max_length=1,
                    ),
                ),
                ("due", models.IntegerField(default=20000)),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.member",
                    ),
                ),
            ],
            options={
                "permissions": (("signuptool_access", "Sign-up Tool access"),),
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("amount", models.IntegerField()),
                ("notes", models.TextField(blank=True)),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.member",
                    ),
                ),
            ],
            options={
                "permissions": (("import_batch_payments", "Import batch payments"),),
            },
        ),
        migrations.CreateModel(
            name="OldPrice",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("price", models.IntegerField()),
                ("changed_on", models.DateTimeField(auto_now_add=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="old_prices",
                        to="stregsystem.product",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NamedProduct",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[^\\d:\\-_][\\w\\-]+$"
                            )
                        ],
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="named_id",
                        to="stregsystem.product",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MobilePayment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("U", "Unset"),
                            ("A", "Approved"),
                            ("I", "Ignored"),
                            ("R", "Rejected"),
                        ],
                        default="U",
                        max_length=1,
                    ),
                ),
                (
                    "customer_name",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                ("timestamp", models.DateTimeField()),
                ("amount", models.IntegerField()),
                ("transaction_id", models.CharField(max_length=32, unique=True)),
                ("comment", models.CharField(blank=True, max_length=128, null=True)),
                (
                    "member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.member",
                    ),
                ),
                (
                    "payment",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.payment",
                    ),
                ),
            ],
            options={
                "permissions": (("mobilepaytool_access", "MobilePaytool access"),),
            },
        ),
        migrations.CreateModel(
            name="AchievementTask",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("alcohol_content", models.BooleanField(default=False)),
                ("caffeine_content", models.BooleanField(default=False)),
                ("goal_count", models.IntegerField(default=1)),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("default", "Default"),
                            ("any", "Any"),
                            ("used_funds", "Used Funds"),
                            ("remaining_funds", "Remaining Funds"),
                        ],
                        default="default",
                        max_length=50,
                    ),
                ),
                (
                    "achievement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.achievement",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.category",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.product",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AchievementConstraint",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "month_start",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                (
                    "month_end",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                (
                    "day_start",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(31),
                        ],
                    ),
                ),
                (
                    "day_end",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(31),
                        ],
                    ),
                ),
                ("time_start", models.TimeField(blank=True, null=True)),
                ("time_end", models.TimeField(blank=True, null=True)),
                (
                    "weekday",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "achievement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.achievement",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Sale",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("price", models.IntegerField()),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.member",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.product",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.room",
                    ),
                ),
            ],
            options={
                "permissions": (("access_sales_reports", "Can access sales reports"),),
                "index_together": {("product", "timestamp")},
            },
        ),
        migrations.CreateModel(
            name="AchievementComplete",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("completed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "achievement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.achievement",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stregsystem.member",
                    ),
                ),
            ],
            options={
                "unique_together": {("member", "achievement")},
            },
        ),
    ]
